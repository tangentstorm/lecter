
# test suite for the @ pseudo-operator.

# @ performs multi-indexing
show[(11,22,33,44) @ 0,1,0,2,0]

# and dictionary extraction
show[(11,22,33,44) @ ("a","b") dict 2,0]

# in general, `x @ y` is equivalent to `each v in y x[v] end`
on step x y z do
	(x,y,z)
end
show[step @ ("a","b") dict 11,22]

# but note that we do not actually shadow a local v!
local v:100
show[(on tmp x do x+v end) @ 11,22,33]

# ...with the exception that `x` is evaluated only once:
on fetch do
	print["fetched"]
	on apply x do
		"applied <%s>" format x
	end
end
show[fetch[] @ 10+range 3]

# chained application
on foo x do
	print["foo %j" x]
	x+500,1000
end
on bar x do
	print["bar %j" x]
	200,x
end
show[      bar @ range 3]
show[foo @ bar @ range 3]

# mapping with monadic primitives
show[count @ "one","two","three","four"]
show[last  @ ((list 11,22),(list 33,44,55))]
show[last  @ (11,22,33,44) dict "one","two","three","four"]

# chained @ with monadic primitives
show[count @ @ ((list "one","two"),(list "three","four"))]
show[first @ @ ((list "one","two"),(list "three","four"))]
show[count @     ((list(list "one","two"),(list "three","four","five")),(list(list "six","seven")))]
show[count @ @   ((list(list "one","two"),(list "three","four","five")),(list(list "six","seven")))]
show[count @ @ @ ((list(list "one","two"),(list "three","four","five")),(list(list "six","seven")))]

# chained @ with monadic functions
on fc x do (first x),count x end
show[fc @     ((list(list "one","two"),(list "three","four","five")),(list(list "six","seven")))]
show[fc @ @   ((list(list "one","two"),(list "three","four","five")),(list(list "six","seven")))]
show[fc @ @ @ ((list(list "one","two"),(list "three","four","five")),(list(list "six","seven")))]
